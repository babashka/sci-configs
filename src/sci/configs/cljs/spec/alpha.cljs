(ns sci.configs.cljs.spec.alpha
  (:refer-clojure :exclude [and or keys merge every cat])
  (:require [clojure.spec.alpha :as s]
            [cljs.spec.gen.alpha :as gen]
            [sci.core :as sci]
            [sci.ctx-store :as ctx]
            [clojure.walk :as walk]
            [clojure.core :as c])
  (:require-macros [sci.configs.macros :as macros]))

(def sns (sci/create-ns 'cljs.spec.alpha nil))

(defonce ^:private registry-ref (atom {}))
(defonce ^:private _speced_vars (atom #{}))

(defn- unfn [expr]
  (if (clojure.core/and (seq? expr)
                        (symbol? (first expr))
                        (= "fn*" (name (first expr))))
    (let [[[s] & form] (rest expr)]
      (conj (walk/postwalk-replace {s '%} form) '[%] 'cljs.core/fn))
    expr))

(defn- ->sym
  "Returns a symbol from a symbol or var"
  [x]
  (if (map? x)
    (:name x)
    x))

(defn- res [env form]
  (cond
    (keyword? form) form
    (symbol? form) (clojure.core/or (->> form (sci/resolve env) ->sym) form)
    (sequential? form) (walk/postwalk #(if (symbol? %) (res env %) %) (unfn form))
    :else form))

(defn- ns-qualify
  "Qualify symbol s by resolving it or using the current *ns*."
  [_env s]
  (if (namespace s)
    (->sym (sci/resolve (ctx/get-ctx) s))
    (symbol (str @sci/ns) (str s))))

(macros/defmacro def*
  "Given a namespace-qualified keyword or resolveable symbol k, and a
  spec, spec-name, predicate or regex-op makes an entry in the
  registry mapping k to the spec. Use nil to remove an entry in
  the registry for k."
  [k spec-form]
  (let [&env (ctx/get-ctx)
        k (if (symbol? k)
            (let [sym (ns-qualify &env k)]
              (swap! _speced_vars conj
                     (vary-meta sym assoc :fdef-ns (-> &env :ns :name)))
              sym)
            k)
        form (res &env spec-form)]
    (swap! registry-ref (fn [r]
                          (if (nil? form)
                            (dissoc r k)
                            (assoc r k form))))
    `(s/def-impl '~k '~form ~spec-form)))

(macros/defmacro and
  "Takes predicate/spec-forms, e.g.

  (s/and even? #(< % 42))

  Returns a spec that returns the conformed value. Successive
  conformed values propagate through rest of predicates."
  [& pred-forms]
  (let [&env (ctx/get-ctx)]
    `(s/and-spec-impl '~(mapv #(res &env %) pred-forms) ~(vec pred-forms) nil)))

(macros/defmacro or
  "Takes key+pred pairs, e.g.

  (s/or :even even? :small #(< % 42))

  Returns a destructuring spec that returns a map entry containing the
  key of the first matching pred and the corresponding value. Thus the
  'key' and 'val' functions can be used to refer generically to the
  components of the tagged return."
  [& key-pred-forms]
  (let [&env (ctx/get-ctx)
        pairs (partition 2 key-pred-forms)
        keys (mapv first pairs)
        pred-forms (mapv second pairs)
        pf (mapv #(res &env %) pred-forms)]
    (clojure.core/assert (clojure.core/and (even? (count key-pred-forms)) (every? keyword? keys)) "spec/or expects k1 p1 k2 p2..., where ks are keywords")
    `(s/or-spec-impl ~keys '~pf ~pred-forms nil)))

(macros/defmacro nilable
  "returns a spec that accepts nil and values satisfiying pred"
  [pred]
  (let [&env (ctx/get-ctx)
        pf (res &env pred)]
    `(s/nilable-impl '~pf ~pred nil)))

(macros/defmacro keys
  "Creates and returns a map validating spec. :req and :opt are both
  vectors of namespaced-qualified keywords. The validator will ensure
  the :req keys are present. The :opt keys serve as documentation and
  may be used by the generator.

  The :req key vector supports 'and' and 'or' for key groups:

  (s/keys :req [::x ::y (or ::secret (and ::user ::pwd))] :opt [::z])

  There are also -un versions of :req and :opt. These allow
  you to connect unqualified keys to specs.  In each case, fully
  qualfied keywords are passed, which name the specs, but unqualified
  keys (with the same name component) are expected and checked at
  conform-time, and generated during gen:

  (s/keys :req-un [:my.ns/x :my.ns/y])

  The above says keys :x and :y are required, and will be validated
  and generated by specs (if they exist) named :my.ns/x :my.ns/y
  respectively.

  In addition, the values of *all* namespace-qualified keys will be validated
  (and possibly destructured) by any registered specs. Note: there is
  no support for inline value specification, by design.

  Optionally takes :gen generator-fn, which must be a fn of no args that
  returns a test.check generator."
  [& {:keys [req req-un opt opt-un gen]}]
  (let [&env (ctx/get-ctx)
        unk #(-> % name keyword)
        req-keys (filterv keyword? (flatten req))
        req-un-specs (filterv keyword? (flatten req-un))
        _ (clojure.core/assert (every? #(clojure.core/and (keyword? %) (namespace %)) (concat req-keys req-un-specs opt opt-un))
                  "all keys must be namespace-qualified keywords")
        req-specs (into req-keys req-un-specs)
        req-keys (into req-keys (map unk req-un-specs))
        opt-keys (into (vec opt) (map unk opt-un))
        opt-specs (into (vec opt) opt-un)
        gx (gensym)
        parse-req (fn [rk f]
                    (map (fn [x]
                           (if (keyword? x)
                             `(contains? ~gx ~(f x))
                             (walk/postwalk
                               (fn [y] (if (keyword? y) `(contains? ~gx ~(f y)) y))
                               x)))
                         rk))
        pred-exprs [`(map? ~gx)]
        pred-exprs (into pred-exprs (parse-req req identity))
        pred-exprs (into pred-exprs (parse-req req-un unk))
        keys-pred `(fn* [~gx] (cljs.core/and ~@pred-exprs))
        pred-exprs (mapv (fn [e] `(fn* [~gx] ~e)) pred-exprs)
        pred-forms (walk/postwalk #(res &env %) pred-exprs)]
    ;; `(map-spec-impl ~req-keys '~req ~opt '~pred-forms ~pred-exprs ~gen)
    `(s/map-spec-impl {:req '~req :opt '~opt :req-un '~req-un :opt-un '~opt-un
                       :req-keys '~req-keys :req-specs '~req-specs
                       :opt-keys '~opt-keys :opt-specs '~opt-specs
                       :pred-forms '~pred-forms
                       :pred-exprs ~pred-exprs
                       :keys-pred ~keys-pred
                       :gfn ~gen})))

(macros/defmacro keys*
  "takes the same arguments as spec/keys and returns a regex op that matches sequences of key/values,
  converts them into a map, and conforms that map with a corresponding
  spec/keys call:

  user=> (s/conform (s/keys :req-un [::a ::c]) {:a 1 :c 2})
  {:a 1, :c 2}
  user=> (s/conform (s/keys* :req-un [::a ::c]) [:a 1 :c 2])
  {:a 1, :c 2}

  the resulting regex op can be composed into a larger regex:

  user=> (s/conform (s/cat :i1 integer? :m (s/keys* :req-un [::a ::c]) :i2 integer?) [42 :a 1 :c 2 :d 4 99])
  {:i1 42, :m {:a 1, :c 2, :d 4}, :i2 99}"
  [& kspecs]
  `(let [mspec# (s/keys ~@kspecs)]
     (s/with-gen (s/& (* (s/cat ::s/k keyword? ::s/v cljs.core/any?)) ::s/kvs->map mspec#)
       (fn [] (gen/fmap (fn [m#] (apply concat m#)) (s/gen mspec#))))))

(macros/defmacro &
  "takes a regex op re, and predicates. Returns a regex-op that consumes
  input as per re but subjects the resulting value to the
  conjunction of the predicates, and any conforming they might perform."
  [re & preds]
  (let [&env (ctx/get-ctx)
        pv (vec preds)]
    `(s/amp-impl ~re '~(res &env re) ~pv '~(mapv #(res &env %) pv))))

(def gns (sci/create-ns 'cljs.spec.gen.alpha))

(macros/defmacro merge
  "Takes map-validating specs (e.g. 'keys' specs) and
  returns a spec that returns a conformed map satisfying all of the
  specs.  Successive conformed values propagate through rest of
  predicates. Unlike 'and', merge can generate maps satisfying the
  union of the predicates."
  [& pred-forms]
  (let [&env (ctx/get-ctx)]
    `(s/merge-spec-impl '~(mapv #(res &env %) pred-forms) ~(vec pred-forms) nil)))

(defn- res-kind
  [env opts]
  (let [{kind :kind :as mopts} opts]
    (->>
     (if kind
       (assoc mopts :kind `~(res env kind))
       mopts)
     (mapcat identity))))

(macros/defmacro coll-of
  "Returns a spec for a collection of items satisfying pred. Unlike
  generator will fill an empty init-coll.

  Same options as 'every'. conform will produce a collection
  corresponding to :into if supplied, else will match the input collection,
  avoiding rebuilding when possible.

  Same options as 'every'.

  See also - every, map-of"
  [pred & opts]
  (let [&env (ctx/get-ctx)
        desc `(coll-of ~(res &env pred) ~@(res-kind &env opts))]
    `(s/every ~pred ::s/conform-all true ::s/describe '~desc ~@opts)))

(macros/defmacro every
  "takes a pred and validates collection elements against that pred.

  Note that 'every' does not do exhaustive checking, rather it samples
  *coll-check-limit* elements. Nor (as a result) does it do any
  conforming of elements. 'explain' will report at most *coll-error-limit*
  problems.  Thus 'every' should be suitable for potentially large
  collections.

  Takes several kwargs options that further constrain the collection:

  :kind - a pred that the collection type must satisfy, e.g. vector?
          (default nil) Note that if :kind is specified and :into is
          not, this pred must generate in order for every to generate.
  :count - specifies coll has exactly this count (default nil)
  :min-count, :max-count - coll has count (<= min-count count max-count) (defaults nil)
  :distinct - all the elements are distinct (default nil)

  And additional args that control gen

  :gen-max - the maximum coll size to generate (default 20)
  :into - one of [], (), {}, #{} - the default collection to generate into
      (default same as :kind if supplied, else []

  Optionally takes :gen generator-fn, which must be a fn of no args that
  returns a test.check generator

  See also - coll-of, every-kv
"
  [pred & {:keys [into kind count max-count min-count distinct gen-max gen-into gen] :as opts}]
  (let [&env (ctx/get-ctx)
        desc (::s/describe opts)
        nopts (-> opts
                (dissoc :gen ::s/describe)
                (assoc ::s/kind-form `'~(res &env (:kind opts))
                       ::s/describe (clojure.core/or desc `'(every ~(res &env pred) ~@(res-kind &env opts)))))
        gx (gensym)
        cpreds (cond-> [(list (clojure.core/or kind `coll?) gx)]
                 count (conj `(= ~count (c/bounded-count ~count ~gx)))

                 (clojure.core/or min-count max-count)
                 (conj `(<= (c/or ~min-count 0)
                          (c/bounded-count (if ~max-count (inc ~max-count) ~min-count) ~gx)
                          (c/or ~max-count MAX_INT)))

                 distinct
                 (conj `(c/or (empty? ~gx) (apply distinct? ~gx))))]
    `(s/every-impl '~pred ~pred ~(assoc nopts ::s/cpred `(fn* [~gx] (c/and ~@cpreds))) ~gen)))

(macros/defmacro tuple
  "takes one or more preds and returns a spec for a tuple, a vector
  where each element conforms to the corresponding pred. Each element
  will be referred to in paths using its ordinal."
  [& preds]
  (let [&env (ctx/get-ctx)]
    (clojure.core/assert (not (empty? preds)))
    `(s/tuple-impl '~(mapv #(res &env %) preds) ~(vec preds))))

(macros/defmacro map-of
  "Returns a spec for a map whose keys satisfy kpred and vals satisfy
  vpred. Unlike 'every-kv', map-of will exhaustively conform every
  value.

  Same options as 'every', :kind defaults to map?, with the addition of:

  :conform-keys - conform keys as well as values (default false)

  See also - every-kv"
  [kpred vpred & opts]
  (let [&env (ctx/get-ctx)
        desc `(map-of ~(res &env kpred) ~(res &env vpred) ~@(res-kind &env opts))]
    `(s/every-kv ~kpred ~vpred ::s/conform-all true :kind map? ::s/describe '~desc ~@opts)))

(macros/defmacro every-kv
  "like 'every' but takes separate key and val preds and works on associative collections.

  Same options as 'every', :into defaults to {}

  See also - map-of"

  [kpred vpred & opts]
  (let [&env (ctx/get-ctx)
        desc `(every-kv ~(res &env kpred) ~(res &env vpred) ~@(res-kind &env opts))]
    `(s/every (s/tuple ~kpred ~vpred) ::s/kfn (fn [i# v#] (nth v# 0)) :into {} ::s/describe '~desc ~@opts)))

(macros/defmacro cat
  "Takes key+pred pairs, e.g.

  (s/cat :e even? :o odd?)

  Returns a regex op that matches (all) values in sequence, returning a map
  containing the keys of each pred and the corresponding value."
  [& key-pred-forms]
  (let [&env (ctx/get-ctx)
        pairs (partition 2 key-pred-forms)
        keys (mapv first pairs)
        pred-forms (mapv second pairs)
        pf (mapv #(res &env %) pred-forms)]
    ;;(prn key-pred-forms)
    (clojure.core/assert (clojure.core/and (even? (count key-pred-forms)) (every? keyword? keys)) "cat expects k1 p1 k2 p2..., where ks are keywords")
    `(s/cat-impl ~keys ~pred-forms '~pf)))

(def namespaces {'cljs.spec.alpha {'def (sci/copy-var def* sns)
                                   'def-impl (sci/copy-var s/def-impl sns)
                                   'and (sci/copy-var and sns)
                                   'and-spec-impl (sci/copy-var s/and-spec-impl sns)
                                   'or (sci/copy-var or sns)
                                   'or-spec-impl (sci/copy-var s/or-spec-impl sns)
                                   'valid? (sci/copy-var s/valid? sns)
                                   'conform (sci/copy-var s/conform sns)
                                   'nilable (sci/copy-var nilable sns)
                                   'nilable-impl (sci/copy-var s/nilable-impl sns)
                                   'explain (sci/copy-var s/explain sns)
                                   'explain-data (sci/copy-var s/explain-data sns)
                                   'keys (sci/copy-var keys sns)
                                   'map-spec-impl (sci/copy-var s/map-spec-impl sns)
                                   'keys* (sci/copy-var keys* sns)
                                   'with-gen (sci/copy-var s/with-gen sns)
                                   '& (sci/copy-var & sns)
                                   'amp-impl (sci/copy-var s/amp-impl sns)
                                   'gen (sci/copy-var s/gen sns)
                                   'merge (sci/copy-var merge sns)
                                   'merge-spec-impl (sci/copy-var s/merge-spec-impl sns)
                                   'coll-of (sci/copy-var coll-of sns)
                                   'every (sci/copy-var every sns)
                                   'every-impl (sci/copy-var s/every-impl sns)
                                   'tuple (sci/copy-var tuple sns)
                                   'tuple-impl (sci/copy-var s/tuple-impl sns)
                                   'map-of (sci/copy-var map-of sns)
                                   'every-kv (sci/copy-var every-kv sns)
                                   'cat (sci/copy-var cat sns)
                                   'cat-impl (sci/copy-var s/cat-impl sns)}
                 'cljs.spec.gen.alpha {'fmap (sci/copy-var gen/fmap gns)}})

(def config {:namespaces namespaces})

;; TODO: multi-spec
